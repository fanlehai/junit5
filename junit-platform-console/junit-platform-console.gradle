apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'

buildscript {
	repositories {
		jcenter()
	}
	dependencies {
		classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
	}
}

configurations {
	shadowed
	standalone
}

dependencies {
	compile(project(':junit-platform-launcher'))
	testCompile(project(':junit-jupiter-api'))
	testCompile("junit:junit:${junit4Version}")

	shadowed('net.sf.jopt-simple:jopt-simple:5.0.3')

	standalone(project(':junit-platform-console'))
	standalone(project(':junit-jupiter-engine'))
	standalone(project(':junit-vintage-engine'))
}

sourceSets.main.compileClasspath += configurations.shadowed

eclipse {
	classpath {
		plusConfigurations += [ configurations.shadowed ]
	}
}

idea {
	module {
		scopes.PROVIDED.plus += [ configurations.shadowed ]
	}
}

jar {
	manifest {
		attributes(
			'Main-Class': 'org.junit.platform.console.ConsoleLauncher'
		)
	}
}

javadoc {
	classpath = project.sourceSets.main.compileClasspath + configurations.shadowed
}

jar.enabled = false
test.enabled = false // prevent supposed-to-fail integration tests from failing the build

shadowJar {
	// Generate shadow jar only if the underlying manifest was regenerated.
	// See https://github.com/junit-team/junit5/issues/631
	onlyIf {
		project.generateManifest
	}
	classifier = null
	configurations = [project.configurations.shadowed]
	exclude 'META-INF/**'
	relocate 'joptsimple', 'org.junit.platform.joptsimple'
	transform(org.junit.platform.gradle.plugins.shadow.transformers.PropertiesFileTransformer) {
		paths = [
			'joptsimple/ExceptionMessages.properties',
			'joptsimple/HelpFormatterMessages.properties'
		]
		keyTransformer = { key ->
			key.replaceAll('^(joptsimple\\..*)$', 'org.junit.platform.$1')
		}
	}
}

task standaloneJar(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
	dependsOn(shadowJar)
	dependsOn(project(":junit-jupiter-engine").jar)
	dependsOn(project(":junit-vintage-engine").jar)

	classifier = 'standalone'
	configurations = [project.configurations.standalone]

	mergeServiceFiles()
	manifest {
		inheritFrom project.tasks.jar.manifest
		attributes(
			'Specification-Title': "$project.name-standalone",
			'Implementation-Title': "$project.name-standalone",
			// generate test engine version information in single shared manifest file
			// pattern of key and value: `'Engine-Version-{YourTestEngine#getId()}': '47.11'`
			'Engine-Version-junit-jupiter': "$rootProject.version",
			'Engine-Version-junit-vintage': "$vintageVersion"
		)
	}
}

artifacts {
	archives shadowJar
	archives standaloneJar
}

task standaloneExec(type: JavaExec, dependsOn: [standaloneJar, testClasses]) {
	ignoreExitValue = true
	workingDir = "$buildDir/libs"
	jvmArgs = ['-ea', "-Djava.util.logging.config.file=$buildDir/resources/test/logging.properties"]
	main = '-jar'
	args = [
			"$standaloneJar.archiveName",
			'--scan-classpath',
			'--include-classname', 'integration.*Integration',
			'--classpath', "$buildDir/classes/test",
			'--details', 'tree'
	]
	standardOutput = new ByteArrayOutputStream()
	errorOutput = new ByteArrayOutputStream()
}

task standaloneCheck(dependsOn: standaloneExec) {
	doLast {
		String text = standaloneExec.errorOutput.toString() + standaloneExec.standardOutput.toString()
		// engines -- output depends on default logging configuration
		assert text.contains("junit-jupiter (group ID: org.junit.jupiter, artifact ID: junit-jupiter-engine, version: $rootProject.version)")
		assert text.contains("junit-vintage (group ID: org.junit.vintage, artifact ID: junit-vintage-engine, version: $vintageVersion)")
		// tree node names
		assert text.contains("JUnit Jupiter")
		assert text.contains("JupiterIntegration")
		assert text.contains("abort()") // TODO && text.contains("Assumption failed: integration-test-abort")
		assert text.contains("successful()")
		assert text.contains("disabled()") // TODO && text.contains("integration-test-disabled")
		assert text.contains("fail()") // TODO && text.contains("integration-test-fail")
		assert text.contains("JUnit Vintage")
		assert text.contains("VintageIntegration")
		assert text.contains("ignored") // TODO && text.contains("integr4tion test")
		assert text.contains("f4il") // TODO && text.contains("f4iled")
		assert text.contains("succ3ssful")
		// summary
		assert text.contains("Test run finished after")
		// container summary
		assert text.contains("4 containers found")
		assert text.contains("0 containers skipped")
		assert text.contains("4 containers started")
		assert text.contains("0 containers aborted")
		assert text.contains("4 containers successful")
		assert text.contains("0 containers failed")
		// tests summary
		assert text.contains("7 tests found")
		assert text.contains("2 tests skipped")
		assert text.contains("5 tests started")
		assert text.contains("1 tests aborted")
		assert text.contains("2 tests successful")
		assert text.contains("2 tests failed")
	}
}

check.dependsOn(standaloneCheck)
